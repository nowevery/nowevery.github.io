html,body,div,span,applet,object,iframe,h1,h2,h3,h4,h5,h6,p,blockquote,pre,a,abbr,acronym,address,big,cite,code,del,dfn,em,img,ins,kbd,q,s,samp,small,strike,strong,sub,sup,tt,var,b,u,i,center,dl,dt,dd,ol,ul,li,fieldset,form,label,legend,table,caption,tbody,tfoot,thead,tr,th,td,article,aside,canvas,details,embed,figure,figcaption,footer,header,hgroup,menu,nav,output,ruby,section,summary,time,mark,audio,video{margin:0;padding:0;border:0;font-size:100%;font:inherit;vertical-align:baseline}article,aside,details,figcaption,figure,footer,header,hgroup,menu,nav,section{display:block}body{line-height:1}ol,ul{list-style:none}blockquote,q{quotes:none}blockquote:before,blockquote:after,q:before,q:after{content:'';content:none}table{border-collapse:collapse;border-spacing:0}


@mixin background-gradient($startColor: #3C3C3C, $endColor: #999999) {
    background-color: $startColor;
    background-image: -webkit-gradient(linear, left top, left bottom, from($startColor), to($endColor));
    background-image: -webkit-linear-gradient(top, $startColor, $endColor);
    background-image:    -moz-linear-gradient(top, $startColor, $endColor);
    background-image:     -ms-linear-gradient(top, $startColor, $endColor);
    background-image:      -o-linear-gradient(top, $startColor, $endColor);
    background-image:         linear-gradient(top, $startColor, $endColor);
    filter:            progid:DXImageTransform.Microsoft.gradient(startColorStr='#{$startColor}', endColorStr='#{$endColor}');
}
@mixin background-size($width: 100%, $height: 100%) {
     -moz-background-size: $width $height;
  -webkit-background-size: $width $height;
          background-size: $width $height;
}
@mixin border-radius($radius: 10px) {
    -moz-border-radius:    $radius;
    -webkit-border-radius: $radius;
    border-radius:         $radius;
}
@mixin border-radius-separate($topLeftRadius: 5px, $topRightRadius: 5px, $bottomLeftRadius: 5px, $bottomRightRadius: 5px) {
    -webkit-border-top-left-radius:     $topLeftRadius;
    -webkit-border-top-right-radius:    $topRightRadius;
    -webkit-border-bottom-right-radius: $bottomRightRadius;
    -webkit-border-bottom-left-radius:  $bottomLeftRadius;
    -moz-border-radius-topleft:     $topLeftRadius;
    -moz-border-radius-topright:    $topRightRadius;
    -moz-border-radius-bottomright: $bottomRightRadius;
    -moz-border-radius-bottomleft:  $bottomLeftRadius;
    border-top-left-radius:     $topLeftRadius;
    border-top-right-radius:    $topRightRadius;
    border-bottom-right-radius: $bottomRightRadius;
    border-bottom-left-radius:  $bottomLeftRadius;
}
@mixin box($orient: horizontal, $pack: center, $align: center) {
    display: -webkit-box;
    display: -moz-box;
    display: box;
    -webkit-box-orient: $orient;
    -moz-box-orient:    $orient;
    box-orient:         $orient;
    -webkit-box-pack: $pack;
    -moz-box-pack:    $pack;
    box-pack:         $pack;
    -webkit-box-align: $align;
    -moz-box-align:    $align;
    box-align:         $align;
}
@mixin box-rgba($r: 60, $g: 3, $b: 12, $opacity: 0.23, $color: #3C3C3C) {
  background-color: transparent;
  background-color: rgba($r, $g, $b, $opacity);
            filter: progid:DXImageTransform.Microsoft.gradient(startColorstr='#{$color}',endColorstr='#{$color}');
            zoom:   1;
}
@mixin box-shadow($x: 2px, $y: 2px, $blur: 5px, $color: rgba(0,0,0,.5), $inset: "") {
  @if ($inset != "") {
    -webkit-box-shadow: $inset $x $y $blur $color;
    -moz-box-shadow:    $inset $x $y $blur $color;
    box-shadow:         $inset $x $y $blur $color;
  } @else {
    -webkit-box-shadow: $x $y $blur $color;
    -moz-box-shadow:    $x $y $blur $color;
    box-shadow:         $x $y $blur $color;
  }
}
@mixin box-sizing($type: border-box) {
    -webkit-box-sizing:   $type;
    -moz-box-sizing:      $type;
    box-sizing:           $type;
}
@mixin columns($count: 3, $gap: 10) {
    -webkit-column-count: $count;
    -moz-column-count:    $count;
    column-count:         $count;
    -webkit-column-gap:   $gap;
    -moz-column-gap:      $gap;
    column-gap:           $gap;
}
@mixin double-borders($colorOne: #3C3C3C, $colorTwo: #999999, $radius: 0) {
    border: 1px solid $colorOne;
    -webkit-box-shadow: 0 0 0 1px $colorTwo;
    -moz-box-shadow:    0 0 0 1px $colorTwo;
    box-shadow:         0 0 0 1px $colorTwo;
    @include border-radius( $radius );
}
@mixin flex($value: 1) {
    -webkit-box-flex: $value;
    -moz-box-flex:    $value;
    box-flex:         $value;
}
@mixin flip($scaleX: -1) {
  -moz-transform:    scaleX($scaleX);
  -o-transform:      scaleX($scaleX);
  -webkit-transform: scaleX($scaleX);
  transform:         scaleX($scaleX);
  filter:            FlipH;
  -ms-filter:        "FlipH";
}
@mixin font-face($fontFamily: myFont, $eotFileSrc: 'myFont.eot', $woffFileSrc: 'myFont.woff', $ttfFileSrc: 'myFont.ttf') {
  font-family: $fontFamily;
  src: url($eotFileSrc)  format('eot'),
       url($woffFileSrc) format('woff'),
       url($ttfFileSrc)  format('truetype');
}
@mixin font-face1 ($fontFamily: myFont, $eotFileSrc: 'myFont.eot') {
  font-family: $fontFamily;
  src: url($eotFileSrc)  format('eot'),
}
@mixin opacity($opacity: 0.5) {
    filter:         alpha(opacity=($opacity * 100));
    -ms-filter:     "progid:DXImageTransform.Microsoft.Alpha(Opacity=" + ($opacity * 100) + ")";
    -moz-opacity:   $opacity;
    -khtml-opacity: $opacity;
    opacity:        $opacity;
}
@mixin outline-radius($radius: 5px) {
    -webkit-outline-radius: $radius;
    -moz-outline-radius:    $radius;
    outline-radius:         $radius;
}
@mixin resize($direction: both) {
    -webkit-resize: $direction;
    -moz-resize:    $direction;
    resize:         $direction;
}
@mixin rotate($deg: 0, $m11: 0, $m12: 0, $m21: 0, $m22: 0) {
     -moz-transform: rotate($deg + deg);
       -o-transform: rotate($deg + deg);
  -webkit-transform: rotate($deg + deg);
      -ms-transform: rotate($deg + deg);
          transform: rotate($deg + deg);
             filter: progid:DXImageTransform.Microsoft.Matrix(
                     M11=#{$m11}, M12=#{$m12}, M21=#{$m21}, M22=#{$m22}, sizingMethod='auto expand');
               zoom: 1;
}
@mixin text-shadow($x: 2px, $y: 2px, $blur: 5px, $color: rgba(0,0,0,.4)) {
    text-shadow: $x $y $blur $color;
}
@mixin transform($params) {
    -webkit-transform: $params;
    -moz-transform:    $params;
    transform:         $params;
}
@mixin transition($what: all, $length: .5s, $easing: ease) {
    -moz-transition:    $what $length $easing;
    -o-transition:      $what $length $easing;
    -webkit-transition: $what $length $easing;
    -ms-transition:     $what $length $easing;
    transition:         $what $length $easing;
}
@mixin triple-borders($colorOne: #3C3C3C, $colorTwo: #999999, $colorThree: #000000, $radius: 0) {
    border: 1px solid $colorOne;
    @include border-radius($radius);
    -webkit-box-shadow: 0 0 0 1px $colorTwo, 0 0 0 2px $colorThree;
    -moz-box-shadow:    0 0 0 1px $colorTwo, 0 0 0 2px $colorThree;
    box-shadow:         0 0 0 1px $colorTwo, 0 0 0 2px $colorThree;
}
@mixin skew($skewX :90deg,$skewY: 90deg){
    -moz-transform:skew($skewX,$skewY);
    -webkit-transform:skew($skewX,$skewY);
    -o-transform:skew($skewX,$skewY);
    -ms-transform:skew($skewX,$skewY);
    transform:skew($skewX,$skewY);
}
@mixin scale($scaleX,$scaleY) {
    -moz-transform: scale($scaleX, $scaleY);
    -o-transform: scale($scaleX, $scaleY);
    -webkit-transform: scale($scaleX, $scaleY);
    transform: scale($scaleX, $scaleY);
    filter: FlipH;
    -ms-filter: "FlipH";
}
@mixin ellipsis($ellipsis-column:2) {
    line-height: 22px;
    overflow: hidden;
    text-overflow: ellipsis;
    display: -webkit-box;
    -webkit-box-orient: vertical;
    -webkit-line-clamp: $ellipsis-column;
}
@mixin translate($translateX:-50%,
$translateY:-50%) {
    transform: translate($translateX, $translateY);
    -moz-transform: translate($translateX, $translateY);
    -o-transform: translate($translateX, $translateY);
    -webkit-transform: translate($translateX, $translateY);
}
@mixin bgsize($size: cover) {
    -moz-background-size: $size;
    -webkit-background-size: $size;
    -o-background-size: $size;
    background-size: $size;
}
@mixin position($top:auto,$right:auto,$bottom:auto,$left:auto) {
    position: absolute;
    top: $top;
    right: $right;
    bottom: $bottom;
    left: $left;
}
@mixin prefix($property,$value) {
    @each $prefix in -webkit-,-moz-,-ms-,-o-,'' {
        #{$prefix}#{$property}: $value;
    }
}
@mixin transition_all($s) {
    @include prefix(transition, all $s ease-in-out)
}
@mixin for-size($size) {
  @if $size == vw-pt-up {
    @media (min-width: 1601px) { @content; }
  }
  @else if $size == basic {
    @media (min-width: 1501px) { @content; }
  }
  @else if $size == lg {
    @media (min-width: 1200px) { @content; }
  }
  @else if $size == pc {
    @media (min-width: 1025px) { @content; }
  }
  @else if $size == md {
    @media (min-width: 992px) { @content; }
  }
  @else if $size == sm {
    @media (min-width: 768px) { @content; }
  }
  @else if $size == xxs-up {
    @media (min-width: 481px) { @content; }
  }
  @else if $size == min-up {
    @media (min-width: 321px) { @content; }
  }
  @else if $size == vw-pt {
    @media (max-width: 1600px) { @content; }
  }
  @else if $size == basic-down {
    @media (max-width: 1500px) { @content; }
  }
  @else if $size == lg-down {
    @media (max-width: 1199px) { @content; }
  }
  @else if $size == pad {
    @media (max-width: 1024px) { @content; }
  }
  @else if $size == md-down {
    @media (max-width: 991px) { @content; }
  }
  @else if $size == xs {
    @media (max-width: 767px) { @content; }
  }
  @else if $size == xxs {
    @media (max-width: 480px) { @content; }
  }
  @else if $size == min {
    @media (max-width: 320px) { @content; }
  }
  @else if $size == horiz {
    @media (max-width: 991px) and (min-aspect-ratio: 568/320) { @content; }
  }
}